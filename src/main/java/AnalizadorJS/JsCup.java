
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 19 01:31:46 CST 2021
//----------------------------------------------------

package AnalizadorJS;

import java_cup.runtime.Symbol;
import Modelos.TokenClase;
import Modelos.TokenFuncion;
import java.util.ArrayList;
import Modelos.Token;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 19 01:31:46 CST 2021
  */
public class JsCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JsCup() {super();}

  /** Constructor which sets the default scanner. */
  public JsCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JsCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\005\007\000\002\011\006" +
    "\000\002\011\005\000\002\011\004\000\002\011\004\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\010" +
    "\010\000\002\010\011\000\002\006\005\000\002\006\006" +
    "\000\002\007\005\000\002\007\005\000\002\007\003\000" +
    "\002\024\004\000\002\024\005\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\006\000\002\024\004\000\002\024\005\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\004\000\002\027\005\000\002\030\005\000\002" +
    "\013\010\000\002\013\007\000\002\014\004\000\002\014" +
    "\004\000\002\014\002\000\002\015\005\000\002\015\004" +
    "\000\002\016\010\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\003\000" +
    "\002\032\003\000\002\035\005\000\002\036\004\000\002" +
    "\036\004\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\022\007\000\002\021\010\000\002\023\013\000" +
    "\002\017\011\000\002\020\007\000\002\020\006\000\002" +
    "\020\005\000\002\025\003\000\002\025\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\034\003\025\004\030\005\007\006\033\007" +
    "\021\010\024\014\006\015\031\016\027\017\026\020\012" +
    "\023\011\061\015\001\002\000\044\002\uffa5\003\uffa5\004" +
    "\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\023\uffa5\027\uffa5\033" +
    "\223\061\uffa5\001\002\000\042\002\ufffe\003\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\023\ufffe\027\ufffe\061\ufffe" +
    "\001\002\000\004\030\252\001\002\000\004\061\uffe8\001" +
    "\002\000\042\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\023\ufff7\027\ufff7\061\ufff7\001\002\000\004" +
    "\056\245\001\002\000\044\002\uffa5\003\uffa5\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\023\uffa5\027\uffa5\033\223\061" +
    "\uffa5\001\002\000\044\002\uffa5\003\uffa5\004\uffa5\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\014\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\023\uffa5\027\uffa5\033\223\061\uffa5" +
    "\001\002\000\042\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\023\ufff4\027\ufff4\061\ufff4\001\002\000" +
    "\016\030\225\034\220\045\227\047\230\067\215\070\217" +
    "\001\002\000\044\002\uffa5\003\uffa5\004\uffa5\005\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\023\uffa5\027\uffa5\033\223\061\uffa5\001" +
    "\002\000\044\002\uffa5\003\uffa5\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\023\uffa5\027\uffa5\033\223\061\uffa5\001\002" +
    "\000\042\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\023\ufff9\027\ufff9\061\ufff9\001\002\000\004\061" +
    "\uffe6\001\002\000\042\002\ufffd\003\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\023\ufffd\027\ufffd\061\ufffd\001\002" +
    "\000\004\061\214\001\002\000\004\030\203\001\002\000" +
    "\006\027\201\033\202\001\002\000\004\030\160\001\002" +
    "\000\004\026\136\001\002\000\004\061\147\001\002\000" +
    "\004\030\041\001\002\000\042\002\ufff5\003\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\023\ufff5\027\ufff5\061\ufff5" +
    "\001\002\000\004\061\uffe7\001\002\000\004\002\040\001" +
    "\002\000\042\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\023\ufffb\027\ufffb\061\ufffb\001\002\000\036" +
    "\002\000\003\025\004\030\005\007\006\033\007\021\010" +
    "\024\014\006\015\031\016\027\017\026\020\012\023\011" +
    "\061\015\001\002\000\042\002\uffff\003\uffff\004\uffff\005" +
    "\uffff\006\uffff\007\uffff\010\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\020\uffff\021\uffff\023\uffff\027\uffff\061\uffff\001" +
    "\002\000\004\002\001\001\002\000\032\012\044\013\052" +
    "\025\064\030\054\044\060\051\062\057\056\060\046\061" +
    "\047\062\045\063\061\065\063\001\002\000\120\002\uffd4" +
    "\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4" +
    "\027\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\061\uffd4\064\uffd4\066\uffd4\071\uffd4\001\002" +
    "\000\116\002\uffdc\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\023\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\061\uffdc\066\uffdc\071\uffdc" +
    "\001\002\000\120\002\uffaf\003\uffaf\004\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\023\uffaf\027\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\061\uffaf\064\uffaf" +
    "\066\uffaf\071\uffaf\001\002\000\120\002\uffb1\003\uffb1\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1\027\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\061\uffb1\064\uffb1\066\uffb1\071\uffb1\001\002\000\120\002" +
    "\uffb2\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\023" +
    "\uffb2\027\uffb2\031\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\061\uffb2\064\uffb2\066\uffb2\071\uffb2\001" +
    "\002\000\122\002\uffd5\003\uffd5\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\023\uffd5\027\uffd5\030\143\031\uffd5\032\uffd5" +
    "\033\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\061\uffd5\064" +
    "\uffd5\066\uffd5\071\uffd5\001\002\000\120\002\uffd3\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3\027\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\061\uffd3\064\uffd3\066\uffd3\071\uffd3\001\002\000\050" +
    "\031\135\035\104\036\120\037\117\040\115\041\110\042" +
    "\100\043\102\044\113\045\124\046\123\047\101\050\103" +
    "\051\116\052\122\053\112\054\114\055\121\071\107\001" +
    "\002\000\120\002\uffae\003\uffae\004\uffae\005\uffae\006\uffae" +
    "\007\uffae\010\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\023\uffae\027\uffae\031\uffae\032\uffae\033\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\061\uffae\064\uffae\066" +
    "\uffae\071\uffae\001\002\000\120\002\uffd2\003\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\027\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\061" +
    "\uffd2\064\uffd2\066\uffd2\071\uffd2\001\002\000\032\012\044" +
    "\013\052\025\064\030\054\044\060\051\062\057\056\060" +
    "\046\061\047\062\045\063\061\065\063\001\002\000\116" +
    "\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\023\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\061\uffd9\066\uffd9\071\uffd9\001\002" +
    "\000\120\002\uffb3\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\023\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\061\uffb3\064\uffb3\066\uffb3" +
    "\071\uffb3\001\002\000\116\002\uffdb\003\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\023\uffdb\027\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\061\uffdb" +
    "\066\uffdb\071\uffdb\001\002\000\032\012\044\013\052\025" +
    "\064\030\054\044\060\051\062\057\056\060\046\061\047" +
    "\062\045\063\061\065\063\001\002\000\120\002\uffb0\003" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\023\uffb0\027" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\061\uffb0\064\uffb0\066\uffb0\071\uffb0\001\002\000" +
    "\032\012\044\013\052\025\064\030\054\044\060\051\062" +
    "\057\056\060\046\061\047\062\045\063\061\065\063\001" +
    "\002\000\034\012\044\013\052\025\064\030\054\044\060" +
    "\051\062\057\056\060\046\061\047\062\045\063\061\065" +
    "\063\066\072\001\002\000\004\030\066\001\002\000\116" +
    "\002\uffda\003\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\023\uffda\027\uffda\031\uffda\032\uffda\033\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\061\uffda\066\uffda\071\uffda\001\002" +
    "\000\004\057\067\001\002\000\004\031\070\001\002\000" +
    "\116\002\uffd8\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\023\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\061\uffd8\066\uffd8\071\uffd8\001" +
    "\002\000\056\031\uffdf\032\uffdf\033\uffdf\035\104\036\120" +
    "\037\117\040\115\041\110\042\100\043\102\044\113\045" +
    "\124\046\123\047\101\050\103\051\116\052\122\053\112" +
    "\054\114\055\121\066\uffdf\071\107\001\002\000\116\002" +
    "\uffd7\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023" +
    "\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\061\uffd7\066\uffd7\071\uffd7\001\002\000" +
    "\010\032\074\033\075\066\076\001\002\000\032\012\044" +
    "\013\052\025\064\030\054\044\060\051\062\057\056\060" +
    "\046\061\047\062\045\063\061\065\063\001\002\000\032" +
    "\012\044\013\052\025\064\030\054\044\060\051\062\057" +
    "\056\060\046\061\047\062\045\063\061\065\063\001\002" +
    "\000\116\002\uffd6\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\023\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\061\uffd6\066\uffd6\071\uffd6" +
    "\001\002\000\056\031\uffe0\032\uffe0\033\uffe0\035\104\036" +
    "\120\037\117\040\115\041\110\042\100\043\102\044\113" +
    "\045\124\046\123\047\101\050\103\051\116\052\122\053" +
    "\112\054\114\055\121\066\uffe0\071\107\001\002\000\032" +
    "\012\uffb8\013\uffb8\025\uffb8\030\uffb8\044\uffb8\051\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\065\uffb8\001\002" +
    "\000\116\002\uffb5\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\023\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\061\uffb5\066\uffb5\071\uffb5" +
    "\001\002\000\032\012\uffb7\013\uffb7\025\uffb7\030\uffb7\044" +
    "\uffb7\051\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7" +
    "\065\uffb7\001\002\000\032\012\uffbe\013\uffbe\025\uffbe\030" +
    "\uffbe\044\uffbe\051\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\065\uffbe\001\002\000\032\012\uffc6\013\uffc6\025" +
    "\uffc6\030\uffc6\044\uffc6\051\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\065\uffc6\001\002\000\032\012\044\013" +
    "\052\025\064\030\054\044\060\051\062\057\056\060\046" +
    "\061\047\062\045\063\061\065\063\001\002\000\032\012" +
    "\044\013\052\025\064\030\054\044\060\051\062\057\056" +
    "\060\046\061\047\062\045\063\061\065\063\001\002\000" +
    "\032\012\uffbf\013\uffbf\025\uffbf\030\uffbf\044\uffbf\051\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\065\uffbf\001" +
    "\002\000\032\012\uffc2\013\uffc2\025\uffc2\030\uffc2\044\uffc2" +
    "\051\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\065" +
    "\uffc2\001\002\000\032\012\044\013\052\025\064\030\054" +
    "\044\060\051\062\057\056\060\046\061\047\062\045\063" +
    "\061\065\063\001\002\000\032\012\uffbb\013\uffbb\025\uffbb" +
    "\030\uffbb\044\uffbb\051\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\065\uffbb\001\002\000\032\012\uffc1\013\uffc1" +
    "\025\uffc1\030\uffc1\044\uffc1\051\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\065\uffc1\001\002\000\032\012\uffba" +
    "\013\uffba\025\uffba\030\uffba\044\uffba\051\uffba\057\uffba\060" +
    "\uffba\061\uffba\062\uffba\063\uffba\065\uffba\001\002\000\032" +
    "\012\uffc3\013\uffc3\025\uffc3\030\uffc3\044\uffc3\051\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\065\uffc3\001\002" +
    "\000\032\012\uffbd\013\uffbd\025\uffbd\030\uffbd\044\uffbd\051" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\065\uffbd" +
    "\001\002\000\032\012\uffc4\013\uffc4\025\uffc4\030\uffc4\044" +
    "\uffc4\051\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4" +
    "\065\uffc4\001\002\000\032\012\uffc5\013\uffc5\025\uffc5\030" +
    "\uffc5\044\uffc5\051\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\065\uffc5\001\002\000\032\012\uffb9\013\uffb9\025" +
    "\uffb9\030\uffb9\044\uffb9\051\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\065\uffb9\001\002\000\032\012\uffbc\013" +
    "\uffbc\025\uffbc\030\uffbc\044\uffbc\051\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\065\uffbc\001\002\000\032\012" +
    "\uffc0\013\uffc0\025\uffc0\030\uffc0\044\uffc0\051\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\065\uffc0\001\002\000" +
    "\116\002\uffb4\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\023\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\061\uffb4\066\uffb4\071\uffb4\001" +
    "\002\000\116\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\023\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\035\104\036\120\037\117\040\115\041\110\042\100\043" +
    "\102\044\113\045\124\046\123\047\101\050\103\051\116" +
    "\052\122\053\112\054\114\055\121\061\uffcf\066\uffcf\071" +
    "\107\001\002\000\116\002\uffdd\003\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\023\uffdd\027\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\035\104\036\120\037\117\040\115\041\110\042" +
    "\100\043\102\044\113\045\124\046\123\047\101\050\103" +
    "\051\116\052\122\053\112\054\114\055\121\061\uffdd\066" +
    "\uffdd\071\107\001\002\000\116\002\uffd0\003\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\027\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\035\104\036\120\037\117\040\115\041" +
    "\110\042\100\043\102\044\113\045\124\046\123\047\101" +
    "\050\103\051\116\052\122\053\112\054\114\055\121\061" +
    "\uffd0\066\uffd0\071\107\001\002\000\056\031\uffe1\032\uffe1" +
    "\033\uffe1\035\104\036\120\037\117\040\115\041\110\042" +
    "\100\043\102\044\113\045\124\046\123\047\101\050\103" +
    "\051\116\052\122\053\112\054\114\055\121\066\uffe1\071" +
    "\107\001\002\000\116\002\uffde\003\uffde\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\023\uffde\027\uffde\031\uffde\032\uffde" +
    "\033\uffde\035\104\036\120\037\117\040\115\041\110\042" +
    "\100\043\102\044\113\045\124\046\123\047\101\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\061\uffde\066" +
    "\uffde\071\107\001\002\000\116\002\uffd1\003\uffd1\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\027\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\100\043\102\044\113\045\124\046\uffd1\047\101" +
    "\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\061" +
    "\uffd1\066\uffd1\071\uffd1\001\002\000\050\031\134\035\104" +
    "\036\120\037\117\040\115\041\110\042\100\043\102\044" +
    "\113\045\124\046\123\047\101\050\103\051\116\052\122" +
    "\053\112\054\114\055\121\071\107\001\002\000\120\002" +
    "\uffb6\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023" +
    "\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\061\uffb6\064\uffb6\066\uffb6\071\uffb6\001" +
    "\002\000\004\026\136\001\002\000\036\003\025\004\030" +
    "\005\007\006\033\007\021\010\024\014\006\015\031\016" +
    "\027\017\026\020\012\023\011\027\140\061\015\001\002" +
    "\000\042\002\uffad\003\uffad\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\023\uffad\027\uffad\061\uffad\001\002\000\044\002" +
    "\uffc8\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\023\uffc8\027\uffc8\061\uffc8\001\002\000\036\003\025" +
    "\004\030\005\007\006\033\007\021\010\024\014\006\015" +
    "\031\016\027\017\026\020\012\023\011\027\142\061\015" +
    "\001\002\000\044\002\uffc9\003\uffc9\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\023\uffc9\027\uffc9\061\uffc9\001" +
    "\002\000\034\012\044\013\052\025\064\030\054\031\144" +
    "\044\060\051\062\057\056\060\046\061\047\062\045\063" +
    "\061\065\063\001\002\000\120\002\uffe3\003\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\027\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\061" +
    "\uffe3\064\uffe3\066\uffe3\071\uffe3\001\002\000\010\031\146" +
    "\032\074\033\075\001\002\000\120\002\uffe2\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\027\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\061\uffe2\064\uffe2\066\uffe2\071\uffe2\001\002\000\004\026" +
    "\150\001\002\000\034\003\025\004\030\005\007\006\033" +
    "\007\021\010\024\014\006\015\031\016\027\017\026\020" +
    "\012\023\011\061\015\001\002\000\036\003\025\004\030" +
    "\005\007\006\033\007\021\010\024\014\006\015\031\016" +
    "\027\017\026\020\012\023\011\027\152\061\015\001\002" +
    "\000\042\002\ufff0\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\023\ufff0\027\ufff0\061\ufff0\001\002\000\004\015" +
    "\154\001\002\000\004\030\155\001\002\000\032\012\044" +
    "\013\052\025\064\030\054\044\060\051\062\057\056\060" +
    "\046\061\047\062\045\063\061\065\063\001\002\000\050" +
    "\031\157\035\104\036\120\037\117\040\115\041\110\042" +
    "\100\043\102\044\113\045\124\046\123\047\101\050\103" +
    "\051\116\052\122\053\112\054\114\055\121\071\107\001" +
    "\002\000\044\002\uffac\003\uffac\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\023\uffac\027\uffac\033\uffac\061\uffac\001\002" +
    "\000\022\012\044\013\052\030\054\057\056\060\046\061" +
    "\047\062\045\063\061\001\002\000\004\031\162\001\002" +
    "\000\004\026\163\001\002\000\006\021\164\022\165\001" +
    "\002\000\022\012\044\013\052\030\054\057\056\060\046" +
    "\061\047\062\045\063\061\001\002\000\004\064\174\001" +
    "\002\000\006\021\170\027\167\001\002\000\042\002\uffaa" +
    "\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\023\uffaa" +
    "\027\uffaa\061\uffaa\001\002\000\022\012\044\013\052\030" +
    "\054\057\056\060\046\061\047\062\045\063\061\001\002" +
    "\000\004\064\172\001\002\000\034\003\025\004\030\005" +
    "\007\006\033\007\021\010\024\014\006\015\031\016\027" +
    "\017\026\020\012\023\011\061\015\001\002\000\040\003" +
    "\025\004\030\005\007\006\033\007\021\010\024\014\006" +
    "\015\031\016\027\017\026\020\012\021\uffa9\023\011\027" +
    "\uffa9\061\015\001\002\000\034\003\025\004\030\005\007" +
    "\006\033\007\021\010\024\014\006\015\031\016\027\017" +
    "\026\020\012\023\011\061\015\001\002\000\040\003\025" +
    "\004\030\005\007\006\033\007\021\010\024\014\006\015" +
    "\031\016\027\017\026\020\012\021\uffa7\023\011\027\uffa7" +
    "\061\015\001\002\000\004\064\177\001\002\000\034\003" +
    "\025\004\030\005\007\006\033\007\021\010\024\014\006" +
    "\015\031\016\027\017\026\020\012\023\011\061\015\001" +
    "\002\000\040\003\025\004\030\005\007\006\033\007\021" +
    "\010\024\014\006\015\031\016\027\017\026\020\012\021" +
    "\uffa8\023\011\027\uffa8\061\015\001\002\000\042\002\ufff1" +
    "\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\023\ufff1" +
    "\027\ufff1\061\ufff1\001\002\000\042\002\ufff2\003\ufff2\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\023\ufff2\027\ufff2\061" +
    "\ufff2\001\002\000\032\012\044\013\052\025\064\030\054" +
    "\044\060\051\062\057\056\060\046\061\047\062\045\063" +
    "\061\065\063\001\002\000\050\031\205\035\104\036\120" +
    "\037\117\040\115\041\110\042\100\043\102\044\113\045" +
    "\124\046\123\047\101\050\103\051\116\052\122\053\112" +
    "\054\114\055\121\071\107\001\002\000\036\003\025\004" +
    "\030\005\007\006\033\007\021\010\024\014\006\015\031" +
    "\016\027\017\026\020\012\023\011\026\136\061\015\001" +
    "\002\000\042\002\uffcd\003\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\023\uffcd\027\uffcd\061\uffcd\001\002\000\044" +
    "\002\uffca\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\211\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\023\uffca\027\uffca\061\uffca\001\002\000\042\002" +
    "\uffce\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023" +
    "\uffce\027\uffce\061\uffce\001\002\000\006\010\024\026\136" +
    "\001\002\000\042\002\uffcc\003\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\023\uffcc\027\uffcc\061\uffcc\001\002\000" +
    "\042\002\uffcb\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\023\uffcb\027\uffcb\061\uffcb\001\002\000\010\034\220" +
    "\067\215\070\217\001\002\000\032\012\uffe9\013\uffe9\025" +
    "\uffe9\030\uffe9\044\uffe9\051\uffe9\057\uffe9\060\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\065\uffe9\001\002\000\032\012\044\013" +
    "\052\025\064\030\054\044\060\051\062\057\056\060\046" +
    "\061\047\062\045\063\061\065\063\001\002\000\032\012" +
    "\uffea\013\uffea\025\uffea\030\uffea\044\uffea\051\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\065\uffea\001\002\000" +
    "\032\012\uffeb\013\uffeb\025\uffeb\030\uffeb\044\uffeb\051\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\065\uffeb\001" +
    "\002\000\112\002\uffef\003\uffef\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\023\uffef\027\uffef\031\uffef\033\uffef\035\104" +
    "\036\120\037\117\040\115\041\110\042\100\043\102\044" +
    "\113\045\124\046\123\047\101\050\103\051\116\052\122" +
    "\053\112\054\114\055\121\061\uffef\071\107\001\002\000" +
    "\042\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\023\ufff6\027\ufff6\061\ufff6\001\002\000\042\002\uffa6" +
    "\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\023\uffa6" +
    "\027\uffa6\061\uffa6\001\002\000\042\002\ufffc\003\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\023\ufffc\027\ufffc\061" +
    "\ufffc\001\002\000\034\012\044\013\052\025\064\030\054" +
    "\031\232\044\060\051\062\057\056\060\046\061\047\062" +
    "\045\063\061\065\063\001\002\000\032\012\044\013\052" +
    "\025\064\030\054\044\060\051\062\057\056\060\046\061" +
    "\047\062\045\063\061\065\063\001\002\000\046\002\uffec" +
    "\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\023\uffec" +
    "\027\uffec\031\uffec\033\uffec\061\uffec\001\002\000\046\002" +
    "\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\023" +
    "\uffed\027\uffed\031\uffed\033\uffed\061\uffed\001\002\000\112" +
    "\002\uffee\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\023\uffee\027\uffee\031\uffee\033\uffee\035\104\036\120\037" +
    "\117\040\115\041\110\042\100\043\102\044\113\045\124" +
    "\046\123\047\101\050\103\051\116\052\122\053\112\054" +
    "\114\055\121\061\uffee\071\107\001\002\000\046\002\uffe3" +
    "\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3" +
    "\026\240\027\uffe3\033\uffe3\061\uffe3\001\002\000\010\031" +
    "\234\032\074\033\075\001\002\000\046\002\uffe2\003\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\026\235" +
    "\027\uffe2\033\uffe2\061\uffe2\001\002\000\034\003\025\004" +
    "\030\005\007\006\033\007\021\010\024\014\006\015\031" +
    "\016\027\017\026\020\012\023\011\061\015\001\002\000" +
    "\036\003\025\004\030\005\007\006\033\007\021\010\024" +
    "\014\006\015\031\016\027\017\026\020\012\023\011\027" +
    "\237\061\015\001\002\000\042\002\uffe4\003\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\027\uffe4\061\uffe4" +
    "\001\002\000\034\003\025\004\030\005\007\006\033\007" +
    "\021\010\024\014\006\015\031\016\027\017\026\020\012" +
    "\023\011\061\015\001\002\000\036\003\025\004\030\005" +
    "\007\006\033\007\021\010\024\014\006\015\031\016\027" +
    "\017\026\020\012\023\011\027\242\061\015\001\002\000" +
    "\042\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\023\uffe5\027\uffe5\061\uffe5\001\002\000\042\002\ufff8" +
    "\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\023\ufff8" +
    "\027\ufff8\061\ufff8\001\002\000\042\002\ufff3\003\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\023\ufff3\027\ufff3\061" +
    "\ufff3\001\002\000\004\024\246\001\002\000\004\030\247" +
    "\001\002\000\032\012\044\013\052\025\064\030\054\044" +
    "\060\051\062\057\056\060\046\061\047\062\045\063\061" +
    "\065\063\001\002\000\050\031\251\035\104\036\120\037" +
    "\117\040\115\041\110\042\100\043\102\044\113\045\124" +
    "\046\123\047\101\050\103\051\116\052\122\053\112\054" +
    "\114\055\121\071\107\001\002\000\044\002\uffc7\003\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\027\uffc7" +
    "\033\uffc7\061\uffc7\001\002\000\012\005\007\006\033\007" +
    "\021\061\253\001\002\000\014\034\220\045\227\047\230" +
    "\067\215\070\217\001\002\000\004\033\255\001\002\000" +
    "\032\012\044\013\052\025\064\030\054\044\060\051\062" +
    "\057\056\060\046\061\047\062\045\063\061\065\063\001" +
    "\002\000\050\033\257\035\104\036\120\037\117\040\115" +
    "\041\110\042\100\043\102\044\113\045\124\046\123\047" +
    "\101\050\103\051\116\052\122\053\112\054\114\055\121" +
    "\071\107\001\002\000\012\005\007\006\033\007\021\061" +
    "\253\001\002\000\004\031\261\001\002\000\004\026\136" +
    "\001\002\000\042\002\uffab\003\uffab\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\023\uffab\027\uffab\061\uffab\001\002\000" +
    "\042\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\023\ufffa\027\ufffa\061\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\036\002\033\003\004\004\035\005\021\006" +
    "\003\010\034\011\015\012\022\013\017\016\012\017\013" +
    "\021\016\022\007\023\031\001\001\000\004\025\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\243\001" +
    "\001\000\004\025\242\001\001\000\002\001\001\000\004" +
    "\037\225\001\001\000\004\025\223\001\001\000\004\025" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\036" +
    "\005\021\006\003\010\034\011\015\012\022\013\017\016" +
    "\012\017\013\021\016\022\007\023\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\041\024\050\026" +
    "\042\027\064\030\054\034\047\035\052\036\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\031\105\032\104\033\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\041\024\132" +
    "\026\042\027\064\030\054\034\047\035\052\036\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\041\024\131\026\042\027\064\030\054\034" +
    "\047\035\052\036\056\001\001\000\002\001\001\000\022" +
    "\006\041\024\130\026\042\027\064\030\054\034\047\035" +
    "\052\036\056\001\001\000\024\006\041\007\072\024\070" +
    "\026\042\027\064\030\054\034\047\035\052\036\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\105\032" +
    "\104\033\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\041\024\127\026\042\027\064\030\054\034" +
    "\047\035\052\036\056\001\001\000\022\006\041\024\076" +
    "\026\042\027\064\030\054\034\047\035\052\036\056\001" +
    "\001\000\002\001\001\000\010\031\105\032\104\033\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\041" +
    "\024\126\026\042\027\064\030\054\034\047\035\052\036" +
    "\056\001\001\000\022\006\041\024\125\026\042\027\064" +
    "\030\054\034\047\035\052\036\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\041\024\124\026\042" +
    "\027\064\030\054\034\047\035\052\036\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\105\032\104\033\110\001" +
    "\001\000\010\031\105\032\104\033\110\001\001\000\010" +
    "\031\105\032\104\033\110\001\001\000\010\031\105\032" +
    "\104\033\110\001\001\000\010\031\105\032\104\033\110" +
    "\001\001\000\010\031\105\032\104\033\110\001\001\000" +
    "\010\031\105\032\104\033\110\001\001\000\002\001\001" +
    "\000\004\015\136\001\001\000\034\003\004\004\140\005" +
    "\021\006\003\010\034\011\015\012\022\013\017\016\012" +
    "\017\013\021\016\022\007\023\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\036\005\021\006\003" +
    "\010\034\011\015\012\022\013\017\016\012\017\013\021" +
    "\016\022\007\023\031\001\001\000\002\001\001\000\024" +
    "\006\041\007\144\024\070\026\042\027\064\030\054\034" +
    "\047\035\052\036\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\004\004\150\005\021\006\003\010\034\011\015\012\022" +
    "\013\017\016\012\017\013\021\016\022\007\023\031\001" +
    "\001\000\032\003\036\005\021\006\003\010\034\011\015" +
    "\012\022\013\017\016\012\017\013\021\016\022\007\023" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\041\024\155\026\042\027\064\030" +
    "\054\034\047\035\052\036\056\001\001\000\010\031\105" +
    "\032\104\033\110\001\001\000\002\001\001\000\012\006" +
    "\041\026\160\034\047\035\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\165\001\001\000\012\006" +
    "\041\026\175\034\047\035\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\041\026" +
    "\170\034\047\035\052\001\001\000\002\001\001\000\034" +
    "\003\004\004\172\005\021\006\003\010\034\011\015\012" +
    "\022\013\017\016\012\017\013\021\016\022\007\023\031" +
    "\001\001\000\032\003\036\005\021\006\003\010\034\011" +
    "\015\012\022\013\017\016\012\017\013\021\016\022\007" +
    "\023\031\001\001\000\034\003\004\004\174\005\021\006" +
    "\003\010\034\011\015\012\022\013\017\016\012\017\013" +
    "\021\016\022\007\023\031\001\001\000\032\003\036\005" +
    "\021\006\003\010\034\011\015\012\022\013\017\016\012" +
    "\017\013\021\016\022\007\023\031\001\001\000\002\001" +
    "\001\000\034\003\004\004\177\005\021\006\003\010\034" +
    "\011\015\012\022\013\017\016\012\017\013\021\016\022" +
    "\007\023\031\001\001\000\032\003\036\005\021\006\003" +
    "\010\034\011\015\012\022\013\017\016\012\017\013\021" +
    "\016\022\007\023\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\041\024\203\026\042\027\064\030" +
    "\054\034\047\035\052\036\056\001\001\000\010\031\105" +
    "\032\104\033\110\001\001\000\034\003\205\005\021\006" +
    "\003\010\034\011\015\012\022\013\017\015\206\016\012" +
    "\017\013\021\016\022\007\023\031\001\001\000\002\001" +
    "\001\000\004\014\207\001\001\000\002\001\001\000\006" +
    "\013\212\015\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\215\001\001\000\002\001\001\000\022" +
    "\006\041\024\220\026\042\027\064\030\054\034\047\035" +
    "\052\036\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\105\032\104\033\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\041" +
    "\007\232\024\070\026\042\027\064\030\054\034\047\035" +
    "\052\036\056\001\001\000\022\006\041\024\230\026\042" +
    "\027\064\030\054\034\047\035\052\036\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\105\032\104" +
    "\033\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\004\004\235\005\021\006\003" +
    "\010\034\011\015\012\022\013\017\016\012\017\013\021" +
    "\016\022\007\023\031\001\001\000\032\003\036\005\021" +
    "\006\003\010\034\011\015\012\022\013\017\016\012\017" +
    "\013\021\016\022\007\023\031\001\001\000\002\001\001" +
    "\000\034\003\004\004\240\005\021\006\003\010\034\011" +
    "\015\012\022\013\017\016\012\017\013\021\016\022\007" +
    "\023\031\001\001\000\032\003\036\005\021\006\003\010" +
    "\034\011\015\012\022\013\017\016\012\017\013\021\016" +
    "\022\007\023\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\041\024\247\026\042\027\064\030\054\034" +
    "\047\035\052\036\056\001\001\000\010\031\105\032\104" +
    "\033\110\001\001\000\002\001\001\000\006\011\253\012" +
    "\022\001\001\000\004\037\225\001\001\000\002\001\001" +
    "\000\022\006\041\024\255\026\042\027\064\030\054\034" +
    "\047\035\052\036\056\001\001\000\010\031\105\032\104" +
    "\033\110\001\001\000\006\011\257\012\022\001\001\000" +
    "\002\001\001\000\004\015\261\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JsCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JsCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JsCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<TokenClase> clases = new ArrayList<>();
    public ArrayList<TokenFuncion> funciones = new ArrayList<>();
    public ArrayList<String> variables = new ArrayList<>();
    public ArrayList<Token> errores = new ArrayList<>();
    public void syntax_error(Symbol s){ 
        this.errores.add(new Token(s.value.toString(),"No se esperaba este componente: "+s.value.toString(),"Sintactico",s.right,s.left));;
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.errores.add(new Token(s.value.toString(),"No se esperaba este componente: "+s.value.toString(),"Sintactico",s.right,s.left)); 
    } 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JsCup$actions {
  private final JsCup parser;

  /** Constructor */
  CUP$JsCup$actions(JsCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JsCup$do_action(
    int                        CUP$JsCup$act_num,
    java_cup.runtime.lr_parser CUP$JsCup$parser,
    java.util.Stack            CUP$JsCup$stack,
    int                        CUP$JsCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JsCup$result;

      /* select the action based on the action number */
      switch (CUP$JsCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FINAL ::= 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("FINAL",19, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FINAL ::= PuntoComa 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("FINAL",19, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASES ::= Default DosPuntos INSTRUCCIONS 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("CASES",14, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASES ::= Case TERMINO DosPuntos INSTRUCCIONS 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("CASES",14, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-3)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASES ::= CASES Case TERMINO DosPuntos INSTRUCCIONS 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("CASES",14, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-4)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SWITCH ::= Switch ParenA TERMINO ParenC LlaveA CASES LlaveC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("SWITCH",13, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-6)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR ::= For ParenA VARIABLE PuntoComa EXPRE PuntoComa VARIABLE ParenC CONTENIDO 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-8)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DOWHILE ::= Do CONTENIDO While ParenA EXPRE ParenC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("DOWHILE",15, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-5)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // WHILE ::= While ParenA EXPRE ParenC CONTENIDO 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("WHILE",16, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-4)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LITERAL ::= False 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LITERAL ::= True 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LITERAL ::= Decimal 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LITERAL ::= Entero 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LITERAL ::= CadenaS 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LITERAL ::= Cadena 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("LITERAL",26, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // UNIDAD ::= EXPRE Incremento 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("UNIDAD",28, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // UNIDAD ::= EXPRE Decremento 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("UNIDAD",28, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ENCAPSULACION ::= ParenA EXPRE ParenC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("ENCAPSULACION",27, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPLOGICO ::= OR 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("OPLOGICO",24, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPLOGICO ::= AND 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("OPLOGICO",24, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPARITMETICO ::= Modulo 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("OPARITMETICO",23, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPARITMETICO ::= Potencia 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("OPARITMETICO",23, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPARITMETICO ::= Division 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("OPARITMETICO",23, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPARITMETICO ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("OPARITMETICO",23, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPARITMETICO ::= Menos 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("OPARITMETICO",23, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPARITMETICO ::= Mas 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("OPARITMETICO",23, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMPARADOR ::= IgualacionS 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("COMPARADOR",25, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COMPARADOR ::= Igualacion 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("COMPARADOR",25, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COMPARADOR ::= Negacion 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("COMPARADOR",25, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COMPARADOR ::= Diferencia 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("COMPARADOR",25, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COMPARADOR ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("COMPARADOR",25, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COMPARADOR ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("COMPARADOR",25, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COMPARADOR ::= Menor 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("COMPARADOR",25, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COMPARADOR ::= Mayor 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("COMPARADOR",25, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONSOLE ::= Console Punto Log ParenA EXPRE ParenC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("CONSOLE",12, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-5)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTENIDO ::= LlaveA LlaveC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("CONTENIDO",11, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTENIDO ::= LlaveA INSTRUCCIONS LlaveC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("CONTENIDO",11, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELSE ::= Else IF 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE ::= Else CONTENIDO 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= If ParenA EXPRE ParenC INSTRUCCION 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-4)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF ::= If ParenA EXPRE ParenC CONTENIDO ELSE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("IF",9, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-5)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMPARACION ::= EXPRE COMPARADOR EXPRE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("COMPARACION",22, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICION ::= EXPRE OPLOGICO EXPRE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= Negacion EXPRE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TERMINO ::= ENCAPSULACION 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TERMINO ::= LITERAL 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TERMINO ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TERMINO ::= Identificador 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRE ::= CorcheA LISTA CorcheC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("EXPRE",18, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRE ::= CorcheA CorcheC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("EXPRE",18, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRE ::= Require ParenA Cadena ParenC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("EXPRE",18, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-3)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRE ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("EXPRE",18, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRE ::= CONDICION 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("EXPRE",18, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRE ::= UNIDAD 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("EXPRE",18, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRE ::= TERMINO 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("EXPRE",18, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRE ::= EXPRE OPARITMETICO EXPRE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("EXPRE",18, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRE ::= Menos EXPRE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("EXPRE",18, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA ::= EXPRE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA ::= LISTA PuntoComa EXPRE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA ::= LISTA Coma EXPRE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LLAMADA ::= Identificador ParenA LISTA ParenC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("LLAMADA",4, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-3)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LLAMADA ::= Identificador ParenA ParenC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("LLAMADA",4, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= Identificador ParenA LISTA ParenC LlaveA INSTRUCCIONS LlaveC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$JsCup$stack.elementAt(CUP$JsCup$top-6)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$JsCup$stack.peek()).value;
		 this.parser.funciones.add(new TokenFuncion(f.toString(),f2left-f1left)); 
              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-6)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= Identificador ParenA ParenC LlaveA INSTRUCCIONS LlaveC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$JsCup$stack.elementAt(CUP$JsCup$top-5)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$JsCup$stack.peek()).value;
		 this.parser.funciones.add(new TokenFuncion(f.toString(),f2left-f1left)); 
              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-5)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPOVARIABLE ::= Const 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLE",8, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPOVARIABLE ::= Let 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLE",8, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPOVARIABLE ::= Var 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("TIPOVARIABLE",8, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION ::= MasIgual 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= MenosIgual 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= Igual 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARIABLE ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARIABLE ::= Identificador Decremento 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLE ::= Identificador ASIGNACION EXPRE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLE ::= TIPOVARIABLE Identificador ASIGNACION EXPRE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).value;
		 this.parser.variables.add(id.toString()); 
              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-3)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CLASE ::= Class Identificador LlaveA INSTRUCCIONS LlaveC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$JsCup$stack.elementAt(CUP$JsCup$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$JsCup$stack.elementAt(CUP$JsCup$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$JsCup$stack.peek()).value;
		 this.parser.clases.add(new TokenClase(c.toString(),c2left-c1left)); 
              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-4)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= error LlaveC 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= Break FINAL 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SWITCH 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= FOR 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= DOWHILE FINAL 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= WHILE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CONSOLE FINAL 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= IF 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= LLAMADA FINAL 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= FUNCION 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= VARIABLE FINAL 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= CLASE 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONS ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONS",2, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONS ::= INSTRUCCIONS INSTRUCCION 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONS",2, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONS 
            {
              Object RESULT =null;

              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          return CUP$JsCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)).value;
		RESULT = start_val;
              CUP$JsCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JsCup$stack.elementAt(CUP$JsCup$top-1)), ((java_cup.runtime.Symbol)CUP$JsCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JsCup$parser.done_parsing();
          return CUP$JsCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

