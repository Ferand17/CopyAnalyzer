
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 19 01:31:46 CST 2021
//----------------------------------------------------

package AnalizadorFCA;

import java.util.ArrayList;
import java_cup.runtime.Symbol;
import Modelos.Token;
import Modelos.Dato;
import Modelos.Variable;
import Main.Grafica;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 19 01:31:46 CST 2021
  */
public class FcaCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FcaCup() {super();}

  /** Constructor which sets the default scanner. */
  public FcaCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FcaCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\004\010\000" +
    "\002\004\007\000\002\005\011\000\002\005\011\000\002" +
    "\005\007\000\002\005\007\000\002\005\007\000\002\005" +
    "\007\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\004\000\002\005\004\000" +
    "\002\006\007\000\002\006\006\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\006" +
    "\000\002\010\014\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\005\000\002\012\004\000\002\012" +
    "\004\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\014\005\005\006\006\020\012\021\011\022" +
    "\007\001\002\000\006\002\000\022\173\001\002\000\004" +
    "\026\170\001\002\000\004\026\165\001\002\000\004\026" +
    "\067\001\002\000\004\002\066\001\002\000\004\026\063" +
    "\001\002\000\004\026\013\001\002\000\016\011\016\012" +
    "\014\013\020\016\022\017\021\023\017\001\002\000\004" +
    "\033\uffdf\001\002\000\004\033\060\001\002\000\004\033" +
    "\uffe0\001\002\000\004\033\uffdb\001\002\000\004\033\uffde" +
    "\001\002\000\004\033\uffdc\001\002\000\004\033\uffdd\001" +
    "\002\000\020\011\016\012\014\013\020\016\022\017\021" +
    "\023\017\027\024\001\002\000\006\002\ufffc\022\ufffc\001" +
    "\002\000\004\033\026\001\002\000\016\024\035\025\031" +
    "\035\034\036\030\041\032\042\027\001\002\000\024\024" +
    "\uffe6\025\uffe6\032\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\001\002\000\016\024\035\025\031\035" +
    "\034\036\030\041\032\042\027\001\002\000\024\024\uffe4" +
    "\025\uffe4\032\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\001\002\000\024\024\uffe7\025\uffe7\032\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001" +
    "\002\000\004\032\051\001\002\000\004\026\036\001\002" +
    "\000\024\024\uffe5\025\uffe5\032\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\001\002\000\006\014\040" +
    "\015\037\001\002\000\004\027\050\001\002\000\004\040" +
    "\041\001\002\000\004\024\042\001\002\000\004\040\043" +
    "\001\002\000\004\024\044\001\002\000\004\040\045\001" +
    "\002\000\004\024\046\001\002\000\004\027\047\001\002" +
    "\000\024\024\uffe1\025\uffe1\032\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\001\002\000\024\024\uffe2" +
    "\025\uffe2\032\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\001\002\000\020\011\uffeb\012\uffeb\013\uffeb" +
    "\016\uffeb\017\uffeb\023\uffeb\027\uffeb\001\002\000\020\024" +
    "\035\025\031\035\034\036\030\037\056\041\032\042\027" +
    "\001\002\000\022\024\uffd7\025\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\054\041\uffd7\042\uffd7\001\002\000\020\024\uffd8" +
    "\025\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\001" +
    "\002\000\022\024\uffd9\025\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\057\041\uffd9\042\uffd9\001\002\000\024\024\uffe3\025" +
    "\uffe3\032\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\001\002\000\020\024\uffda\025\uffda\035\uffda\036" +
    "\uffda\037\uffda\041\uffda\042\uffda\001\002\000\016\024\035" +
    "\025\031\035\034\036\030\041\032\042\027\001\002\000" +
    "\004\032\062\001\002\000\020\011\uffea\012\uffea\013\uffea" +
    "\016\uffea\017\uffea\023\uffea\027\uffea\001\002\000\016\011" +
    "\016\012\014\013\020\016\022\017\021\023\017\001\002" +
    "\000\020\011\016\012\014\013\020\016\022\017\021\023" +
    "\017\027\065\001\002\000\006\002\ufffb\022\ufffb\001\002" +
    "\000\004\002\001\001\002\000\016\003\071\004\072\005" +
    "\070\006\073\020\076\021\075\001\002\000\004\026\162" +
    "\001\002\000\006\027\160\032\161\001\002\000\004\030" +
    "\145\001\002\000\004\026\142\001\002\000\014\005\106" +
    "\006\107\020\111\021\110\027\105\001\002\000\004\026" +
    "\102\001\002\000\004\026\077\001\002\000\016\011\016" +
    "\012\014\013\020\016\022\017\021\023\017\001\002\000" +
    "\020\011\016\012\014\013\020\016\022\017\021\023\017" +
    "\027\101\001\002\000\014\005\uffef\006\uffef\020\uffef\021" +
    "\uffef\027\uffef\001\002\000\016\011\016\012\014\013\020" +
    "\016\022\017\021\023\017\001\002\000\020\011\016\012" +
    "\014\013\020\016\022\017\021\023\017\027\104\001\002" +
    "\000\014\005\uffee\006\uffee\020\uffee\021\uffee\027\uffee\001" +
    "\002\000\006\002\ufffa\022\ufffa\001\002\000\004\026\123" +
    "\001\002\000\004\026\120\001\002\000\004\026\115\001" +
    "\002\000\004\026\112\001\002\000\016\011\016\012\014" +
    "\013\020\016\022\017\021\023\017\001\002\000\020\011" +
    "\016\012\014\013\020\016\022\017\021\023\017\027\114" +
    "\001\002\000\014\005\ufff3\006\ufff3\020\ufff3\021\ufff3\027" +
    "\ufff3\001\002\000\016\011\016\012\014\013\020\016\022" +
    "\017\021\023\017\001\002\000\020\011\016\012\014\013" +
    "\020\016\022\017\021\023\017\027\117\001\002\000\014" +
    "\005\ufff2\006\ufff2\020\ufff2\021\ufff2\027\ufff2\001\002\000" +
    "\016\011\016\012\014\013\020\016\022\017\021\023\017" +
    "\001\002\000\020\011\016\012\014\013\020\016\022\017" +
    "\021\023\017\027\122\001\002\000\014\005\ufff4\006\ufff4" +
    "\020\ufff4\021\ufff4\027\ufff4\001\002\000\006\007\125\010" +
    "\124\001\002\000\004\041\uffe8\001\002\000\004\041\uffe9" +
    "\001\002\000\004\041\136\001\002\000\010\007\125\010" +
    "\124\027\130\001\002\000\014\005\ufff5\006\ufff5\020\ufff5" +
    "\021\ufff5\027\ufff5\001\002\000\004\041\132\001\002\000" +
    "\004\034\133\001\002\000\016\024\035\025\031\035\034" +
    "\036\030\041\032\042\027\001\002\000\004\032\135\001" +
    "\002\000\010\007\ufff9\010\ufff9\027\ufff9\001\002\000\004" +
    "\034\137\001\002\000\016\024\035\025\031\035\034\036" +
    "\030\041\032\042\027\001\002\000\004\032\141\001\002" +
    "\000\010\007\ufff8\010\ufff8\027\ufff8\001\002\000\016\011" +
    "\016\012\014\013\020\016\022\017\021\023\017\001\002" +
    "\000\020\011\016\012\014\013\020\016\022\017\021\023" +
    "\017\027\144\001\002\000\014\005\ufff0\006\ufff0\020\ufff0" +
    "\021\ufff0\027\ufff0\001\002\000\006\024\147\025\146\001" +
    "\002\000\004\040\154\001\002\000\004\040\150\001\002" +
    "\000\004\024\151\001\002\000\004\031\152\001\002\000" +
    "\004\032\153\001\002\000\014\005\ufff7\006\ufff7\020\ufff7" +
    "\021\ufff7\027\ufff7\001\002\000\004\025\155\001\002\000" +
    "\004\031\156\001\002\000\004\032\157\001\002\000\014" +
    "\005\ufff6\006\ufff6\020\ufff6\021\ufff6\027\ufff6\001\002\000" +
    "\014\005\uffec\006\uffec\020\uffec\021\uffec\027\uffec\001\002" +
    "\000\014\005\uffed\006\uffed\020\uffed\021\uffed\027\uffed\001" +
    "\002\000\006\007\125\010\124\001\002\000\010\007\125" +
    "\010\124\027\164\001\002\000\014\005\ufff1\006\ufff1\020" +
    "\ufff1\021\ufff1\027\ufff1\001\002\000\016\011\016\012\014" +
    "\013\020\016\022\017\021\023\017\001\002\000\020\011" +
    "\016\012\014\013\020\016\022\017\021\023\017\027\167" +
    "\001\002\000\006\002\ufffd\022\ufffd\001\002\000\006\007" +
    "\125\010\124\001\002\000\010\007\125\010\124\027\172" +
    "\001\002\000\006\002\ufffe\022\ufffe\001\002\000\004\026" +
    "\174\001\002\000\016\003\071\004\072\005\070\006\073" +
    "\020\076\021\075\001\002\000\014\005\106\006\107\020" +
    "\111\021\110\027\176\001\002\000\006\002\uffff\022\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\006\002\007\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\022\011\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\032\001\001\000\002\001\001\000\006\010\052\012\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\063\011\014\001" +
    "\001\000\004\011\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\077\011\014\001\001\000\004\011\024\001\001\000\002" +
    "\001\001\000\006\006\102\011\014\001\001\000\004\011" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\112\011\014\001\001\000\004\011\024" +
    "\001\001\000\002\001\001\000\006\006\115\011\014\001" +
    "\001\000\004\011\024\001\001\000\002\001\001\000\006" +
    "\006\120\011\014\001\001\000\004\011\024\001\001\000" +
    "\002\001\001\000\006\004\126\007\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\142\011" +
    "\014\001\001\000\004\011\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\162\007\125\001\001\000\004\007\130\001" +
    "\001\000\002\001\001\000\006\006\165\011\014\001\001" +
    "\000\004\011\024\001\001\000\002\001\001\000\006\004" +
    "\170\007\125\001\001\000\004\007\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\174\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FcaCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FcaCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FcaCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Grafica auxgrafica = new Grafica();
    public String titulo= "";
    public String titulox ="";
    public String tituloy = "";
    public String auxDato = "";
    public String auxCarac = "";
    public ArrayList<Object> datosx = new ArrayList<>();
    public ArrayList<Object> datosy = new ArrayList<>();
    public ArrayList<Token> errores = new ArrayList<>();
    public ArrayList<String> titulos = new ArrayList<>();
    
    void direccion(String dato){
        if(this.auxCarac.equalsIgnoreCase("Titulo")){
            this.titulo=dato.replaceAll("\"", "");
            this.titulos.add(dato.replaceAll("\"", ""));
        }else if(this.auxCarac.equalsIgnoreCase("Ejex")){
            this.datosx.add(dato);
        }else if(this.auxCarac.equalsIgnoreCase("Valores")){
            this.datosy.add(dato);
        }else if(this.auxCarac.equalsIgnoreCase("TituloX")){
            this.titulox=dato;
        }else if(this.auxCarac.equalsIgnoreCase("TituloY")){
            this.tituloy=dato;
        }else if(this.auxCarac.equalsIgnoreCase("Archivo")){
            this.datosx.add("Comentarios");
            this.datosx.add("Variables");
            this.datosx.add("Clases");
            this.datosx.add("Funciones");
            this.datosy.add(this.auxgrafica.compararComentarios().toString());
            this.datosy.add(this.auxgrafica.compararVariables().toString());
            this.datosy.add(this.auxgrafica.compararClases().toString());
            this.datosy.add(this.auxgrafica.compararFunciones().toString());
        }else{
            this.auxDato = dato;
        }
    }
    void eliminarDatos(){
        this.titulo="";
        this.titulox="";
        this.tituloy="";
        this.auxDato="";
        this.auxCarac="";
        this.datosx.clear();
        this.datosy.clear();
    }
    public void syntax_error(Symbol s){ 
        this.errores.add(new Token(s.value.toString(),"No se esperaba este componente: "+s.value.toString(),"Sintactico",s.right,s.left));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.errores.add(new Token(s.value.toString(),"No se esperaba este componente: "+s.value.toString(),"Sintactico",s.right,s.left));
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FcaCup$actions {
  private final FcaCup parser;

  /** Constructor */
  CUP$FcaCup$actions(FcaCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FcaCup$do_action(
    int                        CUP$FcaCup$act_num,
    java_cup.runtime.lr_parser CUP$FcaCup$parser,
    java.util.Stack            CUP$FcaCup$stack,
    int                        CUP$FcaCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FcaCup$result;

      /* select the action based on the action number */
      switch (CUP$FcaCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA ::= DATO 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA ::= DATO Coma 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-1)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA ::= LISTA DATO 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-1)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA ::= LISTA DATO Coma 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-2)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CARACTERISTICA ::= Archivo 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.peek()).value;
		 this.parser.auxCarac=f.toString(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA",7, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CARACTERISTICA ::= TituloY 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.peek()).value;
		 this.parser.auxCarac=f.toString(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA",7, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CARACTERISTICA ::= TituloX 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.peek()).value;
		 this.parser.auxCarac=f.toString(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA",7, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CARACTERISTICA ::= Valores 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.peek()).value;
		 this.parser.auxCarac=f.toString(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA",7, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CARACTERISTICA ::= Ejex 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.peek()).value;
		 this.parser.auxCarac=f.toString(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA",7, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CARACTERISTICA ::= Titulo 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.peek()).value;
		 this.parser.auxCarac=f.toString(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA",7, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DATO ::= Dollar LlaveA PuntajeEspecifico Coma Cadena Coma Cadena Coma Cadena LlaveC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-5)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-1)).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-1)).value;
		 this.parser.direccion(this.parser.auxgrafica.retornarPuntajeEspecifico(f.toString().replaceAll("\"", ""), f1.toString().replaceAll("\"", ""), f2.toString().replaceAll("\"", "")).toString()); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("DATO",6, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-9)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DATO ::= Dollar LlaveA PuntajeGeneral LlaveC 
            {
              Object RESULT =null;
		 this.parser.direccion(this.parser.auxgrafica.compararArchivos().toString()); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("DATO",6, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DATO ::= CorcheA LISTA CorcheC 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("DATO",6, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-2)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DATO ::= CadenaS 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.peek()).value;
		 this.parser.direccion(f.toString()); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("DATO",6, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DATO ::= Cadena 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.peek()).value;
		 this.parser.direccion(f.toString()); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("DATO",6, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DATO ::= Numero 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.peek()).value;
		 this.parser.direccion(f.toString()); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("DATO",6, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DATO ::= Identificador 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.peek()).value;
		 this.parser.direccion(this.parser.auxgrafica.retornarValor(f.toString()));  
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("DATO",6, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPODATO ::= Double 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPODATO ::= String 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONFIGURACION ::= CARACTERISTICA DosPuntos DATO PuntoComa 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",4, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONFIGURACION ::= CONFIGURACION CARACTERISTICA DosPuntos DATO PuntoComa 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",4, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-4)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EJECUTARREPORTE ::= error LlaveC 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-1)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EJECUTARREPORTE ::= error PuntoComa 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-1)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EJECUTARREPORTE ::= GraficaLineas LlaveA CONFIGURACION LlaveC 
            {
              Object RESULT =null;
		 this.parser.auxgrafica.mostrarGraficaLinea(this.parser.titulo, this.parser.titulox, this.parser.tituloy, this.parser.auxgrafica.datosGrafica(this.parser.datosx, this.parser.datosy)); this.parser.eliminarDatos(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EJECUTARREPORTE ::= GraficaPie LlaveA CONFIGURACION LlaveC 
            {
              Object RESULT =null;
		 this.parser.auxgrafica.mostrarGraficaPie(this.parser.titulo, this.parser.auxgrafica.datosGrafica(this.parser.datosx, this.parser.datosy)); this.parser.eliminarDatos(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EJECUTARREPORTE ::= GraficaBarras LlaveA CONFIGURACION LlaveC 
            {
              Object RESULT =null;
		 this.parser.auxgrafica.mostrarGraficabarras(this.parser.titulo, this.parser.titulox, this.parser.tituloy, this.parser.auxgrafica.datosGrafica(this.parser.datosx, this.parser.datosy)); this.parser.eliminarDatos(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EJECUTARREPORTE ::= DefinirGlobales LlaveA VARIABLE LlaveC 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EJECUTARREPORTE ::= EJECUTARREPORTE GraficaLineas LlaveA CONFIGURACION LlaveC 
            {
              Object RESULT =null;
		 this.parser.auxgrafica.mostrarGraficaLinea(this.parser.titulo, this.parser.titulox, this.parser.tituloy, this.parser.auxgrafica.datosGrafica(this.parser.datosx, this.parser.datosy)); this.parser.eliminarDatos(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-4)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EJECUTARREPORTE ::= EJECUTARREPORTE GraficaPie LlaveA CONFIGURACION LlaveC 
            {
              Object RESULT =null;
		 this.parser.auxgrafica.mostrarGraficaPie(this.parser.titulo, this.parser.auxgrafica.datosGrafica(this.parser.datosx, this.parser.datosy)); this.parser.eliminarDatos(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-4)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EJECUTARREPORTE ::= EJECUTARREPORTE GraficaBarras LlaveA CONFIGURACION LlaveC 
            {
              Object RESULT =null;
		 this.parser.auxgrafica.mostrarGraficabarras(this.parser.titulo, this.parser.titulox, this.parser.tituloy, this.parser.auxgrafica.datosGrafica(this.parser.datosx, this.parser.datosy)); this.parser.eliminarDatos(); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-4)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EJECUTARREPORTE ::= EJECUTARREPORTE DefinirGlobales LlaveA VARIABLE LlaveC 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-4)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EJECUTARREPORTE ::= Compare ParenA CadenaS Coma CadenaS ParenC PuntoComa 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-6)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EJECUTARREPORTE ::= Compare ParenA Cadena Coma Cadena ParenC PuntoComa 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-4)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-4)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-4)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-2)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-2)).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-2)).value;
		 this.parser.auxgrafica.analisisArchivo(f1.toString().replaceAll("\"", ""), this.parser.auxgrafica.archivosJS1); this.parser.auxgrafica.analisisArchivo(f2.toString().replaceAll("\"", ""), this.parser.auxgrafica.archivosJS2); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("EJECUTARREPORTE",3, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-6)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLE ::= TIPODATO Identificador Igual DATO PuntoComa 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)).value;
		 this.parser.auxgrafica.variables.add(new Variable(f.toString(), this.parser.auxDato)); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-4)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLE ::= VARIABLE TIPODATO Identificador Igual DATO PuntoComa 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)).value;
		 this.parser.auxgrafica.variables.add(new Variable(f.toString(), this.parser.auxDato)); 
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("VARIABLE",2, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-5)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // REPORTE ::= GenerarReporteEstadistico LlaveA EJECUTARREPORTE LlaveC 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("REPORTE",1, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // REPORTE ::= GraficaLineas LlaveA CONFIGURACION LlaveC 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("REPORTE",1, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // REPORTE ::= GraficaPie LlaveA CONFIGURACION LlaveC 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("REPORTE",1, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REPORTE ::= GraficaBarras LlaveA CONFIGURACION LlaveC 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("REPORTE",1, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REPORTE ::= DefinirGlobales LlaveA VARIABLE LlaveC 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("REPORTE",1, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-3)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // REPORTE ::= REPORTE GenerarReporteEstadistico LlaveA EJECUTARREPORTE LlaveC 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("REPORTE",1, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-4)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= REPORTE 
            {
              Object RESULT =null;

              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          return CUP$FcaCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-1)).value;
		RESULT = start_val;
              CUP$FcaCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FcaCup$stack.elementAt(CUP$FcaCup$top-1)), ((java_cup.runtime.Symbol)CUP$FcaCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FcaCup$parser.done_parsing();
          return CUP$FcaCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

